USE SCHEMA AUDIT_DB;

--ensure supplier shares are removed before updating policy changes - return access once complete
CALL SUPPLIER_SHARE.SP_SHARE_PRIVILEGE_MANAGEMENT('MHCP', 'RIO', FALSE, TRUE);
CALL SUPPLIER_SHARE.SP_SHARE_PRIVILEGE_MANAGEMENT('NTEA', 'PCMIS', FALSE, TRUE);
CALL SUPPLIER_SHARE.SP_SHARE_PRIVILEGE_MANAGEMENT('IAPT', 'PCMIS', FALSE, TRUE);

--ensure ownership on these objects e.g. GRANT OWNERSHIP ON MASKING POLICY PII_MASKING_POLICY_NUMBER TO ROLE EMH_ETL_ROLE;
-- CREATE TAG IF NOT EXISTS PROTECTED_PII;
--reset tagging as the policy needs to be removed before being updated
-- ALTER TAG PROTECTED_PII UNSET ALLOWED_VALUES;
-- ALTER TAG PROTECTED_PII SET COMMENT = 'DEFINING PERSONAL IDENTIFIABLE INFORMATION (PII) BY TYPE AND MASKING VIA POLICY';

-- ALTER TAG PROTECTED_PII ADD ALLOWED_VALUES 
-- 'DEFAULT'
-- , 'DEFAULT_KEEPLENGTH'
-- , 'DEFAULT_EMAIL'
-- , 'DEFAULT_DATE'
-- , 'DEFAULT_FULLNAME'
-- , 'DEFAULT_FIRSTNAME'
-- , 'DEFAULT_LASTNAME'
-- , 'DEFAULT_POSTCODE'
-- , 'DEFAULT_NHSNUMBER';

EXECUTE IMMEDIATE $$
BEGIN 
LET count NUMBER(38,0) := (select COUNT(*) 
                            from table(information_schema.policy_references(ref_entity_domain => 'TAG',
                                                                            ref_entity_name=> 'AUDIT_DB.PROTECTED_PII'))
                            WHERE POLICY_NAME = 'PII_MASKING_POLICY_NUMBER');
IF (count > 0) THEN
ALTER TAG PROTECTED_PII UNSET MASKING POLICY PII_MASKING_POLICY_NUMBER;
END IF;
END;
$$
;

--Update tag-based masking policy
CREATE OR REPLACE MASKING POLICY PII_MASKING_POLICY_NUMBER
  AS (val NUMBER) RETURNS NUMBER ->
  CASE
    WHEN (CURRENT_ROLE()) IN ('EMH_ETL_ROLE','R_ENGINEER_UNMASKED','R_MULESOFT_UNMASKED','R_COLLATE')
        OR (IS_DATABASE_ROLE_IN_SESSION('EMH_ETL_ROLE'))
        THEN val
    ELSE
        CASE
            WHEN SYSTEM$GET_TAG_ON_CURRENT_COLUMN('PROTECTED_PII') 
                    IN ('DEFAULT','DEFAULT_NHSNUMBER','DEFAULT_EMAIL','DEFAULT_FULLNAME',
                        'DEFAULT_FIRSTNAME','DEFAULT_LASTNAME','DEFAULT_DATE','DEFAULT_POSTCODE')
                THEN 0
            WHEN SYSTEM$GET_TAG_ON_CURRENT_COLUMN('PROTECTED_PII') = 'DEFAULT_KEEPLENGTH'
                THEN 
                    CASE
                        WHEN LENGTH(val) <= 2 
                            THEN CONCAT(LEFT(INITCAP(val),1),0)
                        ELSE CONCAT(LEFT(INITCAP(val), 1), RPAD(0, LENGTH(val) - 2, 0), RIGHT(val, 1))
                    END
            ELSE
                val
        END
    END
COMMENT='Tag value determines masking type and allows admin roles to bypass masking';

--apply the policy back to the Tag
ALTER TAG PROTECTED_PII SET MASKING POLICY PII_MASKING_POLICY_NUMBER;

--SHOW MASKING POLICIES;

--restore access to shares
-- CALL SUPPLIER_SHARE.SP_SHARE_PRIVILEGE_MANAGEMENT('MHCP', 'RIO', TRUE, TRUE);
-- CALL SUPPLIER_SHARE.SP_SHARE_PRIVILEGE_MANAGEMENT('NTEA', 'PCMIS', TRUE, TRUE);
CALL SUPPLIER_SHARE.SP_SHARE_PRIVILEGE_MANAGEMENT('IAPT', 'PCMIS', TRUE, TRUE);


/*
--CHECK TAGS ON CONTACT
SELECT TAG_NAME, TAG_VALUE, OBJECT_NAME, DOMAIN, COLUMN_NAME
FROM snowflake.account_usage.tag_references
WHERE OBJECT_SCHEMA = 'NTEA'
    AND TAG_NAME = 'PROTECTED_PII'
    AND OBJECT_NAME = 'ODS_CONTACT'
ORDER BY TAG_NAME, DOMAIN, OBJECT_ID;

--CHECK TABLE DATA
SELECT CURRENT_ROLE() MY_ROLE, PHONE, EMAIL, FIRSTNAME, MOBILE_PHONE__C, BIRTHDATE
FROM NTEA.ODS_CONTACT
LIMIT 30;
 */